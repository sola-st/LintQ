{
    "_default": {
        "1": {
            "warning_category": "false positive",
            "reason": "the circuit with classical registers to allocate the measured qubits is added later with qc = meas.compose(circ, front=True), thus it formally has a clasical register but it is added later, not in the first QuantumCircuit definition.",
            "filepath": "data/datasets/exp_v04/files_selected/test_multi_registers_convention_b0607e.py:21:16",
            "sarif_path": "data/analysis_results/exp_v04/codeql_2023-02-17_15-15-49/data.sarif",
            "hash": "3b92ce",
            "ruleId": "QL101-UnmeasurableQubits",
            "message": "Circuit 'qc_3qx_parity' has more qubits (3) than classical  bits (0)"
        },
        "2": {
            "warning_category": "false positive",
            "reason": "the quantum register is added later, after the QuantumCircuit(qreg) has been initializaed with a single quantum register. They add a classical register with qc.add_register(creg)",
            "filepath": "data/datasets/exp_v04/files_selected/exercise4_bd9ce4.py:288:17",
            "sarif_path": "data/analysis_results/exp_v04/codeql_2023-02-17_15-15-49/data.sarif",
            "hash": "c22e65",
            "message": "Circuit 'circuit' never manipulates some of its 2qubits."
        },
        "3": {
            "warning_category": "more bug than not",
            "reason": "the detector is actually correct and precise, the problem is that the quantum program is a toy example (aka exercise for students, fill in the b",
            "filepath": "data/datasets/exp_v04/files_selected/exercise_f4d753.py:9:15",
            "sarif_path": "data/analysis_results/exp_v04/codeql_2023-02-17_15-15-49/data.sarif",
            "hash": "12a28d",
            "ruleId": "QL101-UnmeasurableQubits",
            "message": "Circuit 'U_oracle_circuit' has more qubits (1) than classical  bits (0)"
        },
        "4": {
            "warning_category": "more bug than not",
            "reason": "the circuit is created with two registers of parametrizable values (aka n) and then also a single quantum register of size 1. It is indeed true that the circuit has more qubits than cbit, but the message reports 1 vs 0 rather than n + 1 vs n, because it cannot handle the initializ of reg size with variables.",
            "filepath": "data/datasets/exp_v04/files_selected/util_0d805b.py:76:24",
            "sarif_path": "data/analysis_results/exp_v04/codeql_2023-02-17_15-15-49/data.sarif",
            "hash": "c353e2",
            "message": "Circuit 'qc' never manipulates some of its 7qubits."
        },
        "5": {
            "warning_category": "more bug than not",
            "reason": "the circuit has only quantum registers (5 qregs, 1 of which is with fixed size 1, the other parametrizable), the parameters of the size are global variables, here the message is wrong 1 vs 0, whereas it should be many vs 0 because the constants are not propagated.",
            "filepath": "data/datasets/exp_v04/files_selected/util_0d805b.py:149:22",
            "sarif_path": "data/analysis_results/exp_v04/codeql_2023-02-17_15-15-49/data.sarif",
            "ruleId": "QL101-UnmeasurableQubits",
            "message": "Circuit 'phase_est_circ' has more qubits (1) than classical  bits (0)",
            "hash": "ca5679"
        },
        "6": {
            "warning_category": "more false positive than bug",
            "reason": "here the detector finds it correctly that the ircuit has 3 vs 1 (qreg vs creg), although the application (quantum NN), requires that the output is a single qubit measured, since the input quantum states are entangled and only one qubit is measured in the end (as part of the domain specific idea of using the quantum circuits in this way).",
            "filepath": "data/datasets/exp_v04/files_selected/qnn_97666f.py:183:10",
            "sarif_path": "data/analysis_results/exp_v04/codeql_2023-02-17_15-15-49/data.sarif",
            "ruleId": "QL101-UnmeasurableQubits",
            "message": "Circuit 'qc' has more qubits (3) than classical  bits (1)",
            "hash": "6060f8"
        },
        "7": {
            "warning_category": "more false positive than bug",
            "reason": "new operations are added with a for loop and a loop variable i, thus all qubits are manipulated in the end. Difficult to detect statically (loop unrolling?). Side note: the usage of the API circ.u3(self.U3(), 0, 0,[i]) might be deprecated, check.",
            "filepath": "data/datasets/exp_v04/files_selected/operatortest_checkpoint_463c8a.py:468:16",
            "sarif_path": "data/analysis_results/exp_v04/codeql_2023-02-17_15-15-49/data.sarif",
            "ruleId": "QL103-OversizedCircuit",
            "message": "Circuit 'circ' never manipulates some of its 6qubits.",
            "hash": "fdfd79"
        },
        "8": {
            "warning_category": "false positive",
            "reason": "the current analysis do not model the range(6) with i used to append the new qubits, thus the circuit seems without operations.",
            "filepath": "data/datasets/exp_v04/files_selected/operatortest_checkpoint_463c8a.py:117:20",
            "sarif_path": "data/analysis_results/exp_v04/codeql_2023-02-17_15-15-49/data.sarif",
            "ruleId": "QL103-OversizedCircuit",
            "message": "Circuit 'circ' never manipulates some of its 6qubits.",
            "hash": "8a5e6f"
        },
        "9": {
            "warning_category": "false positive",
            "reason": "the ClasicalRegister is not added manually but implicitely by the measure_all api.",
            "filepath": "data/datasets/exp_v04/files_selected/exercise4_bd9ce4.py:95:11",
            "sarif_path": "data/analysis_results/exp_v04/codeql_2023-02-17_15-15-49/data.sarif",
            "ruleId": "QL101-UnmeasurableQubits",
            "message": "Circuit 'qc_init' has more qubits (2) than classical  bits (0)",
            "hash": "007b16"
        }
    }
}