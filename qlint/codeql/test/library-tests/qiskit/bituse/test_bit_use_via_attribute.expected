| concept_complex_bit_use.py:6:5:6:22 | ControlFlowNode for QuantumRegister() | but use : circuit: qc - reg: q - index: 0 - gate: h |
| concept_complex_bit_use.py:6:5:6:22 | ControlFlowNode for QuantumRegister() | but use : circuit: qc - reg: q - index: 1 - gate: h |
| concept_complex_bit_use.py:6:5:6:22 | ControlFlowNode for QuantumRegister() | but use : circuit: qc - reg: q - index: 2 - gate: h |
| concept_complex_bit_use.py:6:5:6:22 | ControlFlowNode for QuantumRegister() | but use : circuit: qc - reg: q - index: 3 - gate: h |
| concept_complex_bit_use.py:9:6:9:9 | ControlFlowNode for Subscript | but use : circuit: qc - reg: q - index: 0 - gate: h |
| concept_complex_bit_use.py:10:7:10:10 | ControlFlowNode for Subscript | but use : circuit: qc - reg: q - index: 0 - gate: cx |
| concept_complex_bit_use.py:10:13:10:16 | ControlFlowNode for Subscript | but use : circuit: qc - reg: q - index: 1 - gate: cx |
| concept_complex_bit_use.py:11:12:11:15 | ControlFlowNode for Subscript | but use : circuit: qc - reg: q - index: 3 - gate: rx |
| concept_complex_bit_use.py:16:12:16:12 | ControlFlowNode for IntegerLiteral | but use : circuit: qc_front - reg: anonymous register - index: 0 - gate: s |
| concept_complex_bit_use.py:17:13:17:13 | ControlFlowNode for IntegerLiteral | but use : circuit: qc_front - reg: anonymous register - index: 0 - gate: cx |
| concept_complex_bit_use.py:17:16:17:16 | ControlFlowNode for IntegerLiteral | but use : circuit: qc_front - reg: anonymous register - index: 1 - gate: cx |
| concept_complex_bit_use.py:18:13:18:13 | ControlFlowNode for IntegerLiteral | but use : circuit: qc_front - reg: anonymous register - index: 1 - gate: cx |
| concept_complex_bit_use.py:18:16:18:16 | ControlFlowNode for IntegerLiteral | but use : circuit: qc_front - reg: anonymous register - index: 2 - gate: cx |
| concept_complex_bit_use.py:19:13:19:13 | ControlFlowNode for IntegerLiteral | but use : circuit: qc_front - reg: anonymous register - index: 2 - gate: cx |
| concept_complex_bit_use.py:19:16:19:16 | ControlFlowNode for IntegerLiteral | but use : circuit: qc_front - reg: anonymous register - index: 3 - gate: cx |
| concept_complex_bit_use.py:20:12:20:12 | ControlFlowNode for IntegerLiteral | but use : circuit: qc_front - reg: anonymous register - index: 3 - gate: t |
| concept_complex_bit_use.py:38:6:38:13 | ControlFlowNode for Subscript | but use : circuit: qc - reg: qregA - index: 1 - gate: y |
| concept_gate_specification.py:9:6:9:6 | ControlFlowNode for IntegerLiteral | but use : circuit: qc - reg: anonymous register - index: 0 - gate: x |
| concept_gate_specification.py:10:6:10:6 | ControlFlowNode for IntegerLiteral | but use : circuit: qc - reg: anonymous register - index: 1 - gate: y |
| concept_gate_specification.py:11:6:11:6 | ControlFlowNode for IntegerLiteral | but use : circuit: qc - reg: anonymous register - index: 2 - gate: z |
| concept_gate_specification.py:12:6:12:6 | ControlFlowNode for IntegerLiteral | but use : circuit: qc - reg: anonymous register - index: 3 - gate: h |
| concept_gate_specification.py:13:6:13:6 | ControlFlowNode for IntegerLiteral | but use : circuit: qc - reg: anonymous register - index: 4 - gate: s |
| concept_gate_specification.py:14:8:14:8 | ControlFlowNode for IntegerLiteral | but use : circuit: qc - reg: anonymous register - index: 5 - gate: sdg |
| concept_gate_specification.py:15:6:15:6 | ControlFlowNode for IntegerLiteral | but use : circuit: qc - reg: anonymous register - index: 6 - gate: t |
| concept_gate_specification.py:16:8:16:8 | ControlFlowNode for IntegerLiteral | but use : circuit: qc - reg: anonymous register - index: 7 - gate: tdg |
| concept_gate_specification.py:17:24:17:24 | ControlFlowNode for IntegerLiteral | but use : circuit: qc - reg: anonymous register - index: 0 - gate: rx |
| concept_gate_specification.py:18:24:18:24 | ControlFlowNode for IntegerLiteral | but use : circuit: qc - reg: anonymous register - index: 1 - gate: ry |
| concept_gate_specification.py:19:22:19:22 | ControlFlowNode for IntegerLiteral | but use : circuit: qc - reg: anonymous register - index: 2 - gate: rz |
| concept_gate_specification.py:20:24:20:24 | ControlFlowNode for IntegerLiteral | but use : circuit: qc - reg: anonymous register - index: 3 - gate: u1 |
| concept_gate_specification.py:21:23:21:23 | ControlFlowNode for IntegerLiteral | but use : circuit: qc - reg: anonymous register - index: 4 - gate: p |
| concept_gate_specification.py:22:31:22:31 | ControlFlowNode for IntegerLiteral | but use : circuit: qc - reg: anonymous register - index: 4 - gate: u2 |
| concept_gate_specification.py:24:42:24:42 | ControlFlowNode for IntegerLiteral | but use : circuit: qc - reg: anonymous register - index: 5 - gate: u3 |
| concept_gate_specification.py:25:7:25:13 | ControlFlowNode for Subscript | but use : circuit: qc - reg: qreg - index: 0 - gate: cx |
| concept_gate_specification.py:25:16:25:22 | ControlFlowNode for Subscript | but use : circuit: qc - reg: qreg - index: 1 - gate: cx |
| concept_gate_specification.py:26:7:26:13 | ControlFlowNode for Subscript | but use : circuit: qc - reg: qreg - index: 1 - gate: cy |
| concept_gate_specification.py:26:16:26:22 | ControlFlowNode for Subscript | but use : circuit: qc - reg: qreg - index: 2 - gate: cy |
| concept_gate_specification.py:27:7:27:13 | ControlFlowNode for Subscript | but use : circuit: qc - reg: qreg - index: 2 - gate: cz |
| concept_gate_specification.py:27:16:27:22 | ControlFlowNode for Subscript | but use : circuit: qc - reg: qreg - index: 3 - gate: cz |
| concept_gate_specification.py:28:21:28:27 | ControlFlowNode for Subscript | but use : circuit: qc - reg: qreg - index: 3 - gate: ch |
| concept_gate_specification.py:28:43:28:49 | ControlFlowNode for Subscript | but use : circuit: qc - reg: qreg - index: 4 - gate: ch |
| concept_gate_specification.py:29:33:29:39 | ControlFlowNode for Subscript | but use : circuit: qc - reg: qreg - index: 4 - gate: crz |
| concept_gate_specification.py:29:55:29:61 | ControlFlowNode for Subscript | but use : circuit: qc - reg: qreg - index: 5 - gate: crz |
| concept_gate_specification.py:30:33:30:39 | ControlFlowNode for Subscript | but use : circuit: qc - reg: qreg - index: 4 - gate: crx |
| concept_gate_specification.py:30:55:30:61 | ControlFlowNode for Subscript | but use : circuit: qc - reg: qreg - index: 5 - gate: crx |
| concept_gate_specification.py:31:13:31:13 | ControlFlowNode for IntegerLiteral | but use : circuit: qc - reg: anonymous register - index: 1 - gate: crx |
| concept_gate_specification.py:31:16:31:16 | ControlFlowNode for IntegerLiteral | but use : circuit: qc - reg: anonymous register - index: 2 - gate: crx |
| concept_gate_specification.py:32:33:32:39 | ControlFlowNode for Subscript | but use : circuit: qc - reg: qreg - index: 4 - gate: cry |
| concept_gate_specification.py:32:55:32:61 | ControlFlowNode for Subscript | but use : circuit: qc - reg: qreg - index: 5 - gate: cry |
| concept_gate_specification.py:33:33:33:39 | ControlFlowNode for Subscript | but use : circuit: qc - reg: qreg - index: 5 - gate: cu1 |
| concept_gate_specification.py:33:55:33:61 | ControlFlowNode for Subscript | but use : circuit: qc - reg: qreg - index: 6 - gate: cu1 |
| concept_gate_specification.py:34:32:34:38 | ControlFlowNode for Subscript | but use : circuit: qc - reg: qreg - index: 6 - gate: cp |
| concept_gate_specification.py:34:54:34:60 | ControlFlowNode for Subscript | but use : circuit: qc - reg: qreg - index: 7 - gate: cp |
| concept_gate_specification.py:35:51:35:57 | ControlFlowNode for Subscript | but use : circuit: qc - reg: qreg - index: 6 - gate: cu3 |
| concept_gate_specification.py:35:73:35:79 | ControlFlowNode for Subscript | but use : circuit: qc - reg: qreg - index: 7 - gate: cu3 |
| concept_gate_specification.py:36:61:36:67 | ControlFlowNode for Subscript | but use : circuit: qc - reg: qreg - index: 6 - gate: cu |
| concept_gate_specification.py:36:83:36:89 | ControlFlowNode for Subscript | but use : circuit: qc - reg: qreg - index: 7 - gate: cu |
| concept_gate_specification.py:37:9:37:9 | ControlFlowNode for IntegerLiteral | but use : circuit: qc - reg: anonymous register - index: 0 - gate: swap |
| concept_gate_specification.py:37:12:37:12 | ControlFlowNode for IntegerLiteral | but use : circuit: qc - reg: anonymous register - index: 1 - gate: swap |
| concept_gate_specification.py:38:8:38:8 | ControlFlowNode for IntegerLiteral | but use : circuit: qc - reg: anonymous register - index: 0 - gate: ccx |
| concept_gate_specification.py:38:11:38:11 | ControlFlowNode for IntegerLiteral | but use : circuit: qc - reg: anonymous register - index: 1 - gate: ccx |
| concept_gate_specification.py:38:14:38:14 | ControlFlowNode for IntegerLiteral | but use : circuit: qc - reg: anonymous register - index: 2 - gate: ccx |
| concept_gate_specification.py:39:10:39:10 | ControlFlowNode for IntegerLiteral | but use : circuit: qc - reg: anonymous register - index: 0 - gate: cswap |
| concept_gate_specification.py:39:13:39:13 | ControlFlowNode for IntegerLiteral | but use : circuit: qc - reg: anonymous register - index: 1 - gate: cswap |
| concept_gate_specification.py:39:16:39:16 | ControlFlowNode for IntegerLiteral | but use : circuit: qc - reg: anonymous register - index: 2 - gate: cswap |
| concept_gate_specification.py:40:26:40:26 | ControlFlowNode for IntegerLiteral | but use : circuit: qc - reg: anonymous register - index: 0 - gate: rxx |
| concept_gate_specification.py:40:36:40:36 | ControlFlowNode for IntegerLiteral | but use : circuit: qc - reg: anonymous register - index: 1 - gate: rxx |
| concept_gate_specification.py:41:26:41:26 | ControlFlowNode for IntegerLiteral | but use : circuit: qc - reg: anonymous register - index: 1 - gate: ryy |
| concept_gate_specification.py:41:36:41:36 | ControlFlowNode for IntegerLiteral | but use : circuit: qc - reg: anonymous register - index: 2 - gate: ryy |
| concept_gate_specification.py:42:26:42:26 | ControlFlowNode for IntegerLiteral | but use : circuit: qc - reg: anonymous register - index: 2 - gate: rzz |
| concept_gate_specification.py:42:36:42:36 | ControlFlowNode for IntegerLiteral | but use : circuit: qc - reg: anonymous register - index: 3 - gate: rzz |
| concept_gate_specification.py:43:26:43:26 | ControlFlowNode for IntegerLiteral | but use : circuit: qc - reg: anonymous register - index: 3 - gate: rzx |
| concept_gate_specification.py:43:36:43:36 | ControlFlowNode for IntegerLiteral | but use : circuit: qc - reg: anonymous register - index: 4 - gate: rzx |
| concept_gate_specification.py:44:13:44:13 | ControlFlowNode for IntegerLiteral | but use : circuit: qc - reg: anonymous register - index: 4 - gate: rzz |
| concept_gate_specification.py:44:16:44:16 | ControlFlowNode for IntegerLiteral | but use : circuit: qc - reg: anonymous register - index: 5 - gate: rzz |
| concept_gate_specification.py:50:20:50:22 | ControlFlowNode for List | but use : circuit: qc - reg: anonymous register - index: -1 - gate: unitary |
| concept_gate_specification.py:51:12:51:18 | ControlFlowNode for Subscript | but use : circuit: qc - reg: qreg - index: 0 - gate: measure |
| concept_measure.py:3:6:3:23 | ControlFlowNode for QuantumRegister() | but use : circuit: qc - reg: qr - index: 0 - gate: measure |
| concept_measure.py:3:6:3:23 | ControlFlowNode for QuantumRegister() | but use : circuit: qc - reg: qr - index: 1 - gate: measure |
| concept_measure.py:8:12:8:16 | ControlFlowNode for Subscript | but use : circuit: qc - reg: qr - index: 0 - gate: measure |
| concept_measure.py:11:12:11:16 | ControlFlowNode for Subscript | but use : circuit: qc - reg: qr - index: 0 - gate: measure |
| concept_measure.py:12:12:12:12 | ControlFlowNode for IntegerLiteral | but use : circuit: qc - reg: anonymous register - index: 0 - gate: measure |
| concept_measure.py:15:6:15:6 | ControlFlowNode for IntegerLiteral | but use : circuit: qc - reg: anonymous register - index: 0 - gate: h |
| concept_measure.py:16:12:16:12 | ControlFlowNode for IntegerLiteral | but use : circuit: qc - reg: anonymous register - index: 0 - gate: measure |
| concept_measure.py:19:6:19:10 | ControlFlowNode for Subscript | but use : circuit: qc - reg: qr - index: 0 - gate: h |
| concept_measure.py:20:7:20:11 | ControlFlowNode for Subscript | but use : circuit: qc - reg: qr - index: 0 - gate: cx |
| concept_measure.py:20:14:20:14 | ControlFlowNode for IntegerLiteral | but use : circuit: qc - reg: anonymous register - index: 1 - gate: cx |
